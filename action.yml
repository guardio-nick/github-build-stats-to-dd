name: Github Actions Build Stats To Datadog Metric
description: "Get Build Stats in GitHub Actions workflow."
branding:
  icon: check-circle
  color: green
inputs:
  GITHUB_TOKEN:
    description: 'Github token to access the build stats. Repo access should be good enough'
    required: true
  GITHUB_ORG_ID:
    description: 'The organization id where your repository is located. It might be your username, company name, etc'
    required: true
  GITHUB_REPOSITORY_NAME:
    description: 'The repo name that we with to get stats from its workflow'
    required: true
    default: ${{ github.event.repository.name }}
  GITHUB_RUN_ID:
    description: 'The run id that we wish to get stats from'
    required: true
    default: ${{ github.run_id }}
  DD_API_KEY:
    description: Datadog api key
    required: true
  DD_APP_KEY:
    description: Datadog app key
    required: true

runs:
  using: 'composite'
  steps:
      - name: Install Python
        uses: actions/setup-python@v4.7.0
        with:
          python-version: '3.10'

      - name: Get VALGRIND_VERSION
        id: get-valgrind-version
        run: echo "VALGRIND_VERSION=$(apt-cache policy valgrind | grep -oP '(?<=Candidate:\s)(.+)')" >> "$GITHUB_ENV"
        shell: bash

      - name: Cache valgrind
        uses: actions/cache@v3
        id: cache-valgrind
        with:
            path: "~/valgrind"
            key: ${{ env.VALGRIND_VERSION }}

      - name: Install valgrind
        env:
          CACHE_HIT: ${{ steps.cache-valgrind.outputs.cache-hit }}
          VALGRIND_VERSION: ${{ env.VALGRIND_VERSION }}
        shell:
        run: |
            if [[ "$CACHE_HIT" == 'true' ]]; then
              sudo cp --verbose --force --recursive ~/valgrind/* /
            else
              sudo apt-get install --yes valgrind="${{ env.VALGRIND_VERSION }}"
              mkdir -p ~/valgrind
              sudo dpkg -L valgrind | while IFS= read -r f; do if test -f $f; then echo $f; fi; done | xargs cp --parents --target-directory ~/valgrind/
            fi

      - uses: actions/checkout@v3
        with:
          repository: 'guardio-nick/github-build-stats-to-dd'
          ref: 'main'

      - uses: actions/cache@v3
        id: cache-venv
        with:
          path: ./.venv/
          key: ${{ runner.os }}-venv-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-venv-

      - name: apt update
        run: sudo apt-get update
        shell: bash

      - name: Install Dependencies
        run: sudo apt install libcurl4-openssl-dev libssl-dev
        shell: bash

      - name: Pass Inputs to Shell
        run: |
          echo "GITHUB_TOKEN=${{ inputs.GITHUB_TOKEN }}" >> $GITHUB_ENV
          echo "GITHUB_REPOSITORY_NAME=${{ inputs.GITHUB_REPOSITORY_NAME }}" >> $GITHUB_ENV
          echo "GITHUB_RUN_ID=${{ inputs.GITHUB_RUN_ID }}" >> $GITHUB_ENV
          echo "GITHUB_ORG_ID=${{ inputs.GITHUB_ORG_ID }}" >> $GITHUB_ENV
          echo "DD_API_KEY=${{ inputs.DD_API_KEY }}" >> $GITHUB_ENV
          echo "DD_APP_KEY=${{ inputs.DD_APP_KEY }}" >> $GITHUB_ENV
        shell: bash

      - name: Run python script, action stats
        id: get-stats
        run: pip install -r requirements.txt && python src/main.py
        shell: bash
